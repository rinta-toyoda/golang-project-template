name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GOFLAGS: -modcacherw

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: app_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      # ---- Generate OpenAPI code BEFORE lint/tests ----
      - name: Install oapi-codegen
        run: go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Generate OpenAPI code (no-op if files already exist)
        run: |
          mkdir -p gen/openapi/v1/go gen/openapi/auth/go

          # If you keep specs in these default locations, this will generate code.
          # Adjust the paths or remove lines that don't apply to your repo.
          if [ -f api/openapi/v1.yaml ]; then
            oapi-codegen -generate types,client,server -o gen/openapi/v1/go/openapi.gen.go -package openapiv1 api/openapi/v1.yaml
          fi

          if [ -f api/openapi/auth.yaml ]; then
            oapi-codegen -generate types,client,server -o gen/openapi/auth/go/openapi.gen.go -package openapiauth api/openapi/auth.yaml
          fi

          # If the code is already committed, these commands won't hurt.
          # If you generate code elsewhere, replace the commands above with your own.

      - name: go mod tidy
        run: go mod tidy

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/app_db?sslmode=disable
          CSRF_SECRET: test-csrf-secret
          SESSION_SECRET: test-session-secret
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      # ---- Generate OpenAPI code BEFORE lint ----
      - name: Install oapi-codegen
        run: go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Generate OpenAPI code (no-op if files already exist)
        run: |
          mkdir -p gen/openapi/v1/go gen/openapi/auth/go
          if [ -f api/openapi/v1.yaml ]; then
            oapi-codegen -generate types,client,server -o gen/openapi/v1/go/openapi.gen.go -package openapiv1 api/openapi/v1.yaml
          fi
          if [ -f api/openapi/auth.yaml ]; then
            oapi-codegen -generate types,client,server -o gen/openapi/auth/go/openapi.gen.go -package openapiauth api/openapi/auth.yaml
          fi
          go mod tidy

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0
          args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
